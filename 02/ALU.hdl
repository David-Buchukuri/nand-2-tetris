// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // if zx == 1, then x = 0
    oneBitTo16(in=zx, out=zx16);
    Not16(in=zx16, out=notZx16);
    And16(a=notZx16, b=x, out=processedX1);

    // if nx == 1, then x = !x
    Xor16(a=nx, b=processedX1, out=processedX2);
    

    // if zy == 1, then y = 0
    oneBitTo16(in=zy, out=zy16);
    Not16(in=zy16, out=notZy16);
    And16(a=notZy16, b=y, out=processedY1);

    // if ny == 1, then y = !y
    Xor16(a=ny, b=processedY1, out=processedY2);

    // if f == 1, out = x + y, else out = x & y
    Add16(a=processedX2, b=processedY2, out=additionResult);
    And16(a=processedX2, b=processedY2, out=andResult);

    oneBitTo16(in=f, out=f16);
    Not16(in=f16, out=notF16);

    And16(a=f16, b=additionResult, out=resultIfFWas1);
    And16(a=notF16, b=andResult, out=resultIfFWas0);

    Or16(a=resultIfFWas1, b=resultIfFWas0, out=fOutput);

    // if no == 1, x = !x
    Xor16(a=no, b=fOutput, out=out, out[0..7]=outFirstPart, out[8..15]=outSecondPart, out[15]=msb);

    // if out == 0: zr == 1 else zr = 0
    Or8Way(in=outFirstPart, out=is1InPart1);
    Or8Way(in=outSecondPart, out=is1InPart2);
    Or(a=is1InPart1, b=is1InPart2, out=is1inOutput);
    Not(in=is1inOutput, out=zr);

    // if out < 0: ng == 1 else ng = 0
    Or(a=msb, b=msb, out=ng);
}